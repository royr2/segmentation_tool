[{"name":"server.R","content":"options(shiny.maxRequestSize=300*1024^2) \r\n\r\n# Define server logic required to draw a histogram\r\nfunction(input, output, session) {\r\n  \r\n  # Read file and update inputs \r\n  observeEvent(input$input_file, {\r\n    model_data <<- read.csv(input$input_file$datapath)\r\n    model_data <<- as.data.frame(model_data)\r\n    \r\n    # Update input section\r\n    updateSelectInput(session, inputId = \"covariates\", choices = colnames(model_data), selected = NULL)\r\n    updateSelectInput(session, inputId = \"dependent\", choices = colnames(model_data), selected = NULL)\r\n  })\r\n  \r\n  # Reactive expressions\r\n  engine <<- reactive({input$dtree_engine})\r\n  \r\n  # Fit Model\r\n  observeEvent(input$run_model, {\r\n    \r\n    form <<- paste0(input$dependent, \"~\", paste0(input$covariates, collapse = \"+\"))\r\n    \r\n    if(engine() == \"RPART\"){\r\n      mdl <<- rpart(as.formula(form), \r\n                    data = model_data, \r\n                    control = rpart.control(minbucket = input$par_minbucket, \r\n                                            cp = input$par_cp, \r\n                                            maxdepth = input$par_maxdepth))\r\n      \r\n      output$tree_plot <- renderPlot({\r\n        rpart.plot(mdl, main = paste(\"Segmentation via\", engine()))\r\n      })\r\n    }\r\n    \r\n    if(engine() == \"CTREE\"){\r\n      rec <- recipe(model_data, formula = form) %>% \r\n        step_string2factor(all_string()) %>%\r\n        step_dummy(all_factor()) %>% \r\n        prep()\r\n      \r\n      model_data_ctree <- bake(rec, new_data = NULL) %>% \r\n        mutate(!! sym(input$dependent) := as.factor(!! sym(input$dependent)))\r\n      \r\n      form <<- paste0(input$dependent, \"~ .\")\r\n      \r\n      mdl <<- ctree(as.formula(form), \r\n                    data = model_data_ctree, \r\n                    control = ctree_control(minbucket = input$par_minbucket, \r\n                                            maxdepth = input$par_maxdepth, \r\n                                            mincriterion = input$par_mincriterion))\r\n      \r\n      output$tree_plot <- renderPlot({\r\n        plot.party(mdl, main = paste(\"Segmentation via\", engine()))\r\n      })\r\n    }\r\n    \r\n  })\r\n  \r\n  \r\n  \r\n  \r\n}\r\n","type":"text"},{"name":"ui.R","content":"fluidPage(\r\n  \r\n  # Application title\r\n  titlePanel(\"Segmentation\"),\r\n  \r\n  # Sidebar with a slider input for number of bins\r\n  fluidRow(\r\n    \r\n    column(2, \r\n           wellPanel(\r\n             \r\n             # File input\r\n             fileInput(\"input_file\", \"Choose CSV File\", accept = \".csv\"),\r\n             \r\n             # DTREE Engine\r\n             selectInput(\"dtree_engine\", \"Select D-Tree Engine\", c(\"RPART\", \"CTREE\"), \"RPART\"),\r\n             \r\n             # Model inputs\r\n             selectInput(\"covariates\", \"X-Vars\", choices = NULL, selected = NULL, multiple = T, selectize = T),\r\n             selectInput(\"dependent\", \"Y-Var\", choices = NULL, selected = NULL, multiple = F, selectize = T),\r\n             \r\n             # Parameters\r\n             tags$b(\"Model Parameters:\"),\r\n             tags$hr(),\r\n             \r\n             numericInput(\"par_minbucket\", \"Minbucket\", value = 100),\r\n             numericInput(\"par_maxdepth\", \"Maxdepth\", value = 3),\r\n             numericInput(\"par_cp\", \"Cp (RPART)\", value = -1),\r\n             numericInput(\"par_mincriterion\", \"Mincriterion (CTREE)\", value = 0.95),\r\n             \r\n             # Model run\r\n             actionButton(\"run_model\", \"Fit Model\")\r\n           )\r\n    ),\r\n    \r\n    # Plot output\r\n    column(10, plotOutput(\"tree_plot\"))\r\n  )\r\n)\r\n","type":"text"},{"name":"global.R","content":"webr::install(\"rpart\")\r\nwebr::install(\"rpart.plot\")\r\nwebr::install(\"party\")\r\nwebr::install(\"partykit\")\r\nwebr::install(\"data.table\")\r\nwebr::install(\"dplyr\")\r\nwebr::install(\"recipes\")\r\nwebr::install(\"readr\")\r\n\r\nlibrary(rpart)\r\nlibrary(rpart.plot)\r\nlibrary(party)\r\nlibrary(partykit)\r\nlibrary(data.table)\r\nlibrary(dplyr)\r\nlibrary(recipes)\r\nlibrary(readr)\r\n\r\n\r\n\r\n","type":"text"}]
